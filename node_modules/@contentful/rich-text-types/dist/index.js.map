{"version":3,"file":"index.js","sources":["../src/blocks.ts","../src/inlines.ts","../src/marks.ts","../src/schemaConstraints.ts","../src/emptyDocument.ts","../src/helpers.ts","../src/validator/errors.ts","../src/validator/assert.ts","../src/validator/node.ts","../src/validator/path.ts","../src/validator/text.ts","../src/validator/index.ts"],"sourcesContent":["/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexport enum BLOCKS {\n  DOCUMENT = 'document',\n  PARAGRAPH = 'paragraph',\n\n  HEADING_1 = 'heading-1',\n  HEADING_2 = 'heading-2',\n  HEADING_3 = 'heading-3',\n  HEADING_4 = 'heading-4',\n  HEADING_5 = 'heading-5',\n  HEADING_6 = 'heading-6',\n\n  OL_LIST = 'ordered-list',\n  UL_LIST = 'unordered-list',\n  LIST_ITEM = 'list-item',\n\n  HR = 'hr',\n  QUOTE = 'blockquote',\n\n  EMBEDDED_ENTRY = 'embedded-entry-block',\n  EMBEDDED_ASSET = 'embedded-asset-block',\n  EMBEDDED_RESOURCE = 'embedded-resource-block',\n\n  TABLE = 'table',\n  TABLE_ROW = 'table-row',\n  TABLE_CELL = 'table-cell',\n  TABLE_HEADER_CELL = 'table-header-cell',\n}\n","/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n *\n * @note This should be kept in alphabetical order since the\n * [validation package](https://github.com/contentful/content-stack/tree/master/packages/validation)\n *  relies on the values being in a predictable order.\n */\nexport enum INLINES {\n  ASSET_HYPERLINK = 'asset-hyperlink',\n  EMBEDDED_ENTRY = 'embedded-entry-inline',\n  EMBEDDED_RESOURCE = 'embedded-resource-inline',\n  ENTRY_HYPERLINK = 'entry-hyperlink',\n  HYPERLINK = 'hyperlink',\n  RESOURCE_HYPERLINK = 'resource-hyperlink',\n}\n","/**\n * Map of all Contentful marks.\n */\nexport enum MARKS {\n  BOLD = 'bold',\n  ITALIC = 'italic',\n  UNDERLINE = 'underline',\n  CODE = 'code',\n  SUPERSCRIPT = 'superscript',\n  SUBSCRIPT = 'subscript',\n  STRIKETHROUGH = 'strikethrough',\n}\n","import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { MARKS } from './marks';\n\nexport type TopLevelBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE\n  | BLOCKS.TABLE;\n\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nexport const TOP_LEVEL_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n  BLOCKS.TABLE,\n];\n\nexport type ListItemBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE;\n\n/**\n * Array of all allowed block types inside list items\n */\nexport const LIST_ITEM_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\nexport const TABLE_BLOCKS = [\n  BLOCKS.TABLE,\n  BLOCKS.TABLE_ROW,\n  BLOCKS.TABLE_CELL,\n  BLOCKS.TABLE_HEADER_CELL,\n];\n\n/**\n * Array of all void block types\n */\nexport const VOID_BLOCKS = [\n  BLOCKS.HR,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nexport const CONTAINERS = {\n  [BLOCKS.OL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.UL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.LIST_ITEM]: LIST_ITEM_BLOCKS,\n  [BLOCKS.QUOTE]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE]: [BLOCKS.TABLE_ROW],\n  [BLOCKS.TABLE_ROW]: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n  [BLOCKS.TABLE_CELL]: [BLOCKS.PARAGRAPH, BLOCKS.UL_LIST, BLOCKS.OL_LIST],\n  [BLOCKS.TABLE_HEADER_CELL]: [BLOCKS.PARAGRAPH],\n};\n\n/**\n * Array of all heading levels\n */\nexport const HEADINGS = [\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n];\n\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nexport const TEXT_CONTAINERS = [BLOCKS.PARAGRAPH, ...HEADINGS];\n\n/**\n * Node types before `tables` release.\n */\nexport const V1_NODE_TYPES = [\n  BLOCKS.DOCUMENT,\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.LIST_ITEM,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  INLINES.HYPERLINK,\n  INLINES.ENTRY_HYPERLINK,\n  INLINES.ASSET_HYPERLINK,\n  INLINES.EMBEDDED_ENTRY,\n  'text',\n];\n\n/**\n * Marks before `superscript` & `subscript` release.\n */\nexport const V1_MARKS = [MARKS.BOLD, MARKS.CODE, MARKS.ITALIC, MARKS.UNDERLINE];\n","import { BLOCKS } from './blocks';\nimport { Document } from './types';\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nexport const EMPTY_DOCUMENT: Document = {\n  nodeType: BLOCKS.DOCUMENT,\n  data: {},\n  content: [\n    {\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          value: '',\n          marks: [],\n          data: {},\n        },\n      ],\n    },\n  ],\n};\n","import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { Block, Inline, Node, Text, Document as CDocument } from './types';\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj: Record<string, unknown>, value: unknown) {\n  for (const key of Object.keys(obj)) {\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  return hasValue(INLINES, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  return hasValue(BLOCKS, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.nodeType === 'text';\n}\n\n/**\n * Checks if a paragraph is empty (has only one child and that child is an empty string text node)\n */\nexport function isEmptyParagraph(node: Block): boolean {\n  if (node.nodeType !== BLOCKS.PARAGRAPH) {\n    return false;\n  }\n\n  if (node.content.length !== 1) {\n    return false;\n  }\n\n  const textNode = node.content[0];\n  return textNode.nodeType === 'text' && (textNode as Text).value === '';\n}\n\nfunction isValidDocument(document: unknown): document is CDocument {\n  return (\n    document != null &&\n    typeof document === 'object' &&\n    'content' in document &&\n    Array.isArray((document as CDocument).content)\n  );\n}\n\nconst MIN_NODES_FOR_STRIPPING = 2;\n\n/**\n * Strips empty trailing paragraph from a document if enabled\n * @param document - The rich text document to process\n * @returns A new document with the empty trailing paragraph removed (if conditions are met)\n * @example\n * const processedDoc = stripEmptyTrailingParagraphFromDocument(document);\n */\nexport function stripEmptyTrailingParagraphFromDocument(document: CDocument): CDocument {\n  if (!isValidDocument(document) || document.content.length < MIN_NODES_FOR_STRIPPING) {\n    return document;\n  }\n\n  const lastNode = document.content[document.content.length - 1];\n\n  // Check if the last node is an empty paragraph\n  if (isEmptyParagraph(lastNode)) {\n    return {\n      ...document,\n      content: document.content.slice(0, -1),\n    };\n  }\n\n  return document;\n}\n","import { ValidationError } from '.';\nimport type { Path } from './path';\n\nexport const typeMismatchError = ({\n  path,\n  property,\n  typeName,\n  value,\n}: {\n  path: Path;\n  property: string | number;\n  typeName: string;\n  value: any;\n}): ValidationError => {\n  return {\n    details: `The type of \"${property}\" is incorrect, expected type: ${typeName}`,\n    name: 'type',\n    path: path.toArray(),\n    type: typeName,\n    value,\n  };\n};\n\nexport const minSizeError = ({\n  min,\n  value,\n  path,\n}: {\n  min: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    min,\n    path: path.toArray(),\n    details: `Size must be at least ${min}`,\n    value,\n  };\n};\n\nexport const maxSizeError = ({\n  max,\n  value,\n  path,\n}: {\n  max: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    max,\n    path: path.toArray(),\n    details: `Size must be at most ${max}`,\n    value,\n  };\n};\n\nexport const enumError = ({\n  expected,\n  value,\n  path,\n}: {\n  expected: string[];\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `Value must be one of expected values`,\n    name: 'in',\n    expected: [...expected].sort(),\n    path: path.toArray(),\n    value,\n  };\n};\n\nexport const unknownPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is not expected`,\n    name: 'unexpected',\n    path: path.toArray(),\n  };\n};\n\nexport const requiredPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is required here`,\n    name: 'required',\n    path: path.toArray(),\n  };\n};\n","import isPlainObject from 'is-plain-obj';\n\nimport { ValidationError } from '.';\nimport {\n  maxSizeError,\n  typeMismatchError,\n  enumError,\n  unknownPropertyError,\n  requiredPropertyError,\n  minSizeError,\n} from './errors';\nimport type { Path } from './path';\n\nexport class ObjectAssertion {\n  private _errors: ValidationError[] = [];\n\n  constructor(\n    private readonly obj: Record<string, any>,\n    private readonly path: Path,\n  ) {}\n\n  catch = (...errors: ValidationError[]): void => {\n    this._errors.push(...errors);\n  };\n\n  get errors(): ValidationError[] {\n    const serializeError = (error: ValidationError): string =>\n      JSON.stringify({\n        details: error.details,\n        path: error.path,\n      });\n\n    return this._errors.filter(\n      (error, index) =>\n        this._errors.findIndex((step) => serializeError(error) === serializeError(step)) === index,\n    );\n  }\n\n  /**\n   * Asserts the key exists in the object. You probably shouldn't call this\n   * function directly. Instead, use `$.object`, `$.number`, `$.string`, etc.\n   */\n  exists = (key: string): boolean => {\n    if (key in this.obj) {\n      return true;\n    }\n\n    this.catch(\n      requiredPropertyError({\n        property: key,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a plain object. if\n   * no key is provided, it asserts the object itself.\n   */\n  public object = (key?: string): boolean => {\n    const value = key ? this.obj[key] : this.obj;\n\n    if (key) {\n      if (!this.exists(key)) {\n        return false;\n      }\n    }\n\n    if (isPlainObject(value)) {\n      return true;\n    }\n\n    const path = key ? this.path.of(key) : this.path;\n    const property = key ?? this.path.last() ?? 'value';\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Object',\n        property,\n        path,\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a string.\n   */\n  public string = (key: string): boolean => {\n    const value = this.obj[key];\n\n    if (key && !this.exists(key)) {\n      return false;\n    }\n\n    if (typeof value === 'string') {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'String',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a number.\n   */\n  public number = (key: string, optional?: boolean): boolean => {\n    const value = this.obj[key];\n\n    if (optional && !(key in this.obj)) {\n      return true;\n    }\n\n    if (!this.exists(key)) {\n      return false;\n    }\n\n    if (typeof value === 'number' && !Number.isNaN(value)) {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Number',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is an array. You don't\n   * need to manually call this function before `$.each` or `$.maxLength`.\n   */\n  public array = (key: string): boolean => {\n    const value = this.obj[key];\n\n    if (key && !this.exists(key)) {\n      return false;\n    }\n\n    if (Array.isArray(value)) {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Array',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the value of the key is one of the expected values.\n   */\n  public enum = (key: string, expected: string[]): boolean => {\n    const value = this.obj[key];\n\n    if (typeof value === 'string' && expected.includes(value)) {\n      return true;\n    }\n\n    this.catch(\n      enumError({\n        expected,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the array value of the object key is empty. If the value isn't an\n   * array, the function captures a type error and returns false.\n   */\n  public empty = (key: string): boolean => {\n    if (!this.array(key)) {\n      return false;\n    }\n\n    const value = this.obj[key] as Array<unknown>;\n\n    if (value.length === 0) {\n      return true;\n    }\n\n    this.catch(\n      maxSizeError({\n        max: 0,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the length of the value of the object key is at least `min`. If the\n   * value isn't an array, the function captures a type error and returns false.\n   */\n  public minLength = (key: string, min: number): boolean => {\n    if (!this.array(key)) {\n      return false;\n    }\n\n    const value = this.obj[key] as Array<unknown>;\n\n    if (value.length >= min) {\n      return true;\n    }\n\n    this.catch(\n      minSizeError({\n        min,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the object has no additional properties other than the ones\n   * specified\n   */\n  public noAdditionalProperties = (properties: string[]): boolean => {\n    const unknowns = Object.keys(this.obj)\n      .sort()\n      .filter((key) => !properties.includes(key));\n\n    unknowns.forEach((property) =>\n      this.catch(\n        unknownPropertyError({\n          property,\n          path: this.path.of(property),\n        }),\n      ),\n    );\n\n    return unknowns.length === 0;\n  };\n\n  /**\n   * Iterates over the value of the key and assert each item. If the value isn't\n   * an array, the function captures a type error and safely exits.\n   *\n   * To maintain compatibility with previous implementation, we stop early if we\n   * find any errors.\n   */\n  public each = (key: string, assert: (item: any, path: Path) => ValidationError[]): void => {\n    if (!this.array(key)) {\n      return;\n    }\n\n    const value = this.obj[key] as Array<any>;\n\n    let foundErrors = false;\n    value.forEach((item, index) => {\n      if (foundErrors) {\n        return;\n      }\n\n      const errors = assert(item, this.path.of(key).of(index));\n\n      if (errors.length > 0) {\n        foundErrors = true;\n      }\n\n      this.catch(...errors);\n    });\n  };\n}\n","import { ValidationError } from '.';\nimport {\n  AssetHyperlink,\n  AssetLinkBlock,\n  EntryHyperlink,\n  EntryLinkBlock,\n  Hyperlink,\n  ResourceLinkBlock,\n  ResourceLinkInline,\n} from '../nodeTypes';\nimport { Block, Document, Inline } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport type Node = Document | Block | Inline;\n\nexport type GetContentRule<T extends Node> =\n  | string[]\n  | ((\n      node: T,\n      path: Path,\n    ) => {\n      nodeTypes: string[];\n      min?: number;\n    });\n\nexport type ValidateData<T extends Node> = (data: T['data'], path: Path) => ValidationError[];\n\nexport const VOID_CONTENT: GetContentRule<Node> = [];\n\nexport class NodeAssertion<T extends Node = Node> {\n  constructor(\n    private contentRule: GetContentRule<T>,\n    private validateData?: ValidateData<T>,\n  ) {}\n\n  assert(node: T, path: Path): ValidationError[] {\n    const $ = new ObjectAssertion(node, path);\n\n    if (!$.object()) {\n      return $.errors;\n    }\n\n    $.noAdditionalProperties(['nodeType', 'data', 'content']);\n\n    const { nodeTypes, min = 0 } = Array.isArray(this.contentRule)\n      ? {\n          nodeTypes: this.contentRule,\n        }\n      : this.contentRule(node, path);\n\n    if (nodeTypes.length === 0 && min > 0) {\n      throw new Error(\n        `Invalid content rule. Cannot have enforce a 'min' of ${min} with no nodeTypes`,\n      );\n    }\n\n    $.minLength('content', min);\n\n    // Is void\n    if (nodeTypes.length === 0) {\n      $.empty('content');\n    }\n\n    // Ensure content nodes have valid nodeTypes without validating the full\n    // shape which is something that's only done later if the current node is\n    // valid.\n    else {\n      $.each('content', (item, path) => {\n        const item$ = new ObjectAssertion(item, path);\n\n        if (!item$.object()) {\n          return item$.errors;\n        }\n\n        item$.enum('nodeType', nodeTypes);\n\n        return item$.errors;\n      });\n    }\n\n    if ($.object('data')) {\n      const dataErrors = this.validateData?.(node.data, path.of('data')) ?? [];\n      $.catch(...dataErrors);\n    }\n\n    return $.errors;\n  }\n}\n\nexport class EntityLinkAssertion<\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n> extends NodeAssertion<T> {\n  private type: 'ResourceLink' | 'Link';\n\n  constructor(\n    private linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n    contentNodeTypes: GetContentRule<T>,\n  ) {\n    super(contentNodeTypes, (data, path) => this.assertLink(data, path));\n    this.type = this.linkType.startsWith('Contentful:') ? 'ResourceLink' : 'Link';\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    if ($.object('target')) {\n      const sys$ = new ObjectAssertion(data.target.sys, path.of('target').of('sys'));\n\n      if (sys$.object()) {\n        sys$.enum('type', [this.type]);\n        sys$.enum('linkType', [this.linkType]);\n\n        if (this.type === 'Link') {\n          sys$.string('id');\n          sys$.noAdditionalProperties(['type', 'linkType', 'id']);\n        } else if (this.type === 'ResourceLink') {\n          sys$.string('urn');\n          sys$.noAdditionalProperties(['type', 'linkType', 'urn']);\n        }\n      }\n\n      $.catch(...sys$.errors);\n    }\n\n    $.noAdditionalProperties(['target']);\n\n    return $.errors;\n  };\n}\n\nexport class HyperLinkAssertion<T extends Hyperlink> extends NodeAssertion<T> {\n  constructor() {\n    super(['text'], (data, path) => this.assertLink(data, path));\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.string('uri');\n    $.noAdditionalProperties(['uri']);\n\n    return $.errors;\n  };\n}\n\nexport const assert = <T extends Node>(\n  contentRule: GetContentRule<T>,\n  validateData?: ValidateData<T>,\n): NodeAssertion<T> => {\n  return new NodeAssertion(contentRule, validateData);\n};\n\nexport const assertLink = <\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n>(\n  linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n  contentRule: GetContentRule<T>,\n): EntityLinkAssertion<T> => {\n  return new EntityLinkAssertion(linkType, contentRule);\n};\n","export class Path {\n  constructor(private readonly path: (string | number)[] = []) {}\n\n  of = (element: string | number): Path => {\n    return new Path([...this.path, element]);\n  };\n\n  isRoot = (): boolean => {\n    return this.path.length === 0;\n  };\n\n  last = (): string | number | undefined => {\n    return this.path[this.path.length - 1];\n  };\n\n  toArray = (): (string | number)[] => {\n    return this.path;\n  };\n}\n","import { ValidationError } from '.';\nimport { Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport function assertText(text: Text, path: Path): ValidationError[] {\n  const $ = new ObjectAssertion(text, path);\n\n  if (!$.object()) {\n    return $.errors;\n  }\n\n  $.noAdditionalProperties(['nodeType', 'data', 'value', 'marks']);\n\n  $.object('data');\n  $.each('marks', (mark, path) => {\n    const mark$ = new ObjectAssertion(mark, path);\n\n    if (!mark$.object()) {\n      return mark$.errors;\n    }\n\n    // For historical reasons, we don't explicitly check for supported marks\n    // e.g. bold, italic ..etc. This makes it possible for a customer to add\n    // custom marks\n    mark$.string('type');\n\n    return mark$.errors;\n  });\n\n  $.string('value');\n\n  return $.errors;\n}\n","import { BLOCKS } from '../blocks';\nimport { INLINES } from '../inlines';\nimport { CONTAINERS, LIST_ITEM_BLOCKS, TOP_LEVEL_BLOCKS } from '../schemaConstraints';\nimport { Document, Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport { NodeAssertion, Node, HyperLinkAssertion, assert, assertLink, VOID_CONTENT } from './node';\nimport { Path } from './path';\nimport { assertText } from './text';\n\nexport type ValidationError = {\n  name: string;\n  type?: string;\n  value?: Record<string, any> | string | number | boolean | null;\n  min?: number | string;\n  max?: number | string;\n  details?: string | null;\n  path?: (string | number)[];\n  contentTypeId?: string | string[];\n  nodeType?: string;\n  customMessage?: string;\n  expected?: string[];\n};\n\nconst assertInlineOrText = assert([...Object.values(INLINES), 'text'].sort());\n\nconst assertList = assert([BLOCKS.LIST_ITEM]);\nconst assertVoidEntryLink = assertLink('Entry', VOID_CONTENT);\nconst assertTableCell = assert(\n  () => ({\n    nodeTypes: [BLOCKS.PARAGRAPH],\n    min: 1,\n  }),\n  (data, path) => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.noAdditionalProperties(['colspan', 'rowspan']);\n    $.number('colspan', true);\n    $.number('rowspan', true);\n\n    return $.errors;\n  },\n);\n\nconst nodeValidator: Record<Node['nodeType'], NodeAssertion<any>> = {\n  [BLOCKS.DOCUMENT]: assert(TOP_LEVEL_BLOCKS),\n  [BLOCKS.PARAGRAPH]: assertInlineOrText,\n  [BLOCKS.HEADING_1]: assertInlineOrText,\n  [BLOCKS.HEADING_2]: assertInlineOrText,\n  [BLOCKS.HEADING_3]: assertInlineOrText,\n  [BLOCKS.HEADING_4]: assertInlineOrText,\n  [BLOCKS.HEADING_5]: assertInlineOrText,\n  [BLOCKS.HEADING_6]: assertInlineOrText,\n  [BLOCKS.QUOTE]: assert(CONTAINERS[BLOCKS.QUOTE]),\n  [BLOCKS.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [BLOCKS.EMBEDDED_ASSET]: assertLink('Asset', VOID_CONTENT),\n  [BLOCKS.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [BLOCKS.HR]: assert(VOID_CONTENT),\n  [BLOCKS.OL_LIST]: assertList,\n  [BLOCKS.UL_LIST]: assertList,\n  [BLOCKS.LIST_ITEM]: assert([...LIST_ITEM_BLOCKS].sort()),\n  [BLOCKS.TABLE]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_ROW],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_ROW]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_CELL]: assertTableCell,\n  [BLOCKS.TABLE_HEADER_CELL]: assertTableCell,\n  [INLINES.HYPERLINK]: new HyperLinkAssertion(),\n  [INLINES.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [INLINES.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [INLINES.ENTRY_HYPERLINK]: assertLink('Entry', ['text']),\n  [INLINES.ASSET_HYPERLINK]: assertLink('Asset', ['text']),\n  [INLINES.RESOURCE_HYPERLINK]: assertLink('Contentful:Entry', ['text']),\n};\n\nfunction validateNode(node: Node | Text, path: Path): ValidationError[] {\n  if (node.nodeType === 'text') {\n    return assertText(node, path);\n  }\n\n  const errors = nodeValidator[node.nodeType].assert(node, path);\n\n  if (errors.length > 0) {\n    return errors;\n  }\n\n  const $ = new ObjectAssertion(node, path);\n\n  $.each('content', (item, path) => {\n    // We already know those are valid nodes thanks to the assertion done in\n    // the NodeAssertion class\n    return validateNode(item, path);\n  });\n\n  return $.errors;\n}\n\nexport const validateRichTextDocument = (document: Document): ValidationError[] => {\n  const path = new Path();\n  const $ = new ObjectAssertion(document, path);\n\n  if ($.object()) {\n    $.enum('nodeType', [BLOCKS.DOCUMENT]);\n  }\n\n  if ($.errors.length > 0) {\n    return $.errors;\n  }\n\n  return validateNode(document, path);\n};\n"],"names":["BLOCKS","INLINES","MARKS","_a"],"mappings":"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"}