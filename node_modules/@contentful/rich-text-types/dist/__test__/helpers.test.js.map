{"version":3,"file":"helpers.test.js","sourceRoot":"","sources":["../../src/__test__/helpers.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { BLOCKS } from '../blocks';\nimport { helpers } from '../index';\nimport { Document, Mark } from '../types';\n\ndescribe('helpers', () => {\n  describe('isEmptyParagraph', () => {\n    it('returns true for empty paragraph', () => {\n      const node = {\n        nodeType: BLOCKS.PARAGRAPH,\n        data: {},\n        content: [\n          {\n            nodeType: 'text' as const,\n            value: '',\n            marks: [] as Mark[],\n            data: {},\n          },\n        ],\n      };\n      expect(helpers.isEmptyParagraph(node)).toBe(true);\n    });\n\n    it('returns false for non-empty paragraph', () => {\n      const node = {\n        nodeType: BLOCKS.PARAGRAPH,\n        data: {},\n        content: [\n          {\n            nodeType: 'text' as const,\n            value: 'Hello world',\n            marks: [] as Mark[],\n            data: {},\n          },\n        ],\n      };\n      expect(helpers.isEmptyParagraph(node)).toBe(false);\n    });\n\n    it('returns false for paragraph with multiple text nodes', () => {\n      const node = {\n        nodeType: BLOCKS.PARAGRAPH,\n        data: {},\n        content: [\n          {\n            nodeType: 'text' as const,\n            value: '',\n            marks: [] as Mark[],\n            data: {},\n          },\n          {\n            nodeType: 'text' as const,\n            value: '',\n            marks: [] as Mark[],\n            data: {},\n          },\n        ],\n      };\n      expect(helpers.isEmptyParagraph(node)).toBe(false);\n    });\n\n    it('returns false for non-paragraph node', () => {\n      const node = {\n        nodeType: BLOCKS.HEADING_1,\n        data: {},\n        content: [\n          {\n            nodeType: 'text' as const,\n            value: '',\n            marks: [] as Mark[],\n            data: {},\n          },\n        ],\n      };\n      expect(helpers.isEmptyParagraph(node)).toBe(false);\n    });\n  });\n\n  describe('stripEmptyTrailingParagraphFromDocument', () => {\n    it('strips empty trailing paragraph', () => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        data: {},\n        content: [\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            data: {},\n            content: [\n              {\n                nodeType: 'text' as const,\n                value: 'Hello world',\n                marks: [] as Mark[],\n                data: {},\n              },\n            ],\n          },\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            data: {},\n            content: [\n              {\n                nodeType: 'text' as const,\n                value: '',\n                marks: [] as Mark[],\n                data: {},\n              },\n            ],\n          },\n        ],\n      };\n\n      const result = helpers.stripEmptyTrailingParagraphFromDocument(document);\n      expect(result.content).toHaveLength(1);\n      expect(result.content[0].nodeType).toBe(BLOCKS.PARAGRAPH);\n    });\n\n    it('does not strip empty trailing paragraph when it is the only child', () => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        data: {},\n        content: [\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            data: {},\n            content: [\n              {\n                nodeType: 'text' as const,\n                value: '',\n                marks: [] as Mark[],\n                data: {},\n              },\n            ],\n          },\n        ],\n      };\n\n      const result = helpers.stripEmptyTrailingParagraphFromDocument(document);\n      expect(result.content).toHaveLength(1);\n    });\n\n    it('does not strip non-empty trailing paragraph', () => {\n      const document: Document = {\n        nodeType: BLOCKS.DOCUMENT,\n        data: {},\n        content: [\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            data: {},\n            content: [\n              {\n                nodeType: 'text' as const,\n                value: 'Hello world',\n                marks: [] as Mark[],\n                data: {},\n              },\n            ],\n          },\n          {\n            nodeType: BLOCKS.PARAGRAPH,\n            data: {},\n            content: [\n              {\n                nodeType: 'text' as const,\n                value: 'Not empty',\n                marks: [] as Mark[],\n                data: {},\n              },\n            ],\n          },\n        ],\n      };\n\n      const result = helpers.stripEmptyTrailingParagraphFromDocument(document);\n      expect(result.content).toHaveLength(2);\n    });\n  });\n});\n"]}