'use strict';

var richTextTypes = require('@contentful/rich-text-types');
var escape = require('escape-html');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var _a, _b;
var attributeValue = function (value) { return "\"".concat(value.replace(/"/g, '&quot;'), "\""); };
var defaultNodeRenderers = (_a = {},
    _a[richTextTypes.BLOCKS.PARAGRAPH] = function (node, next) { return "<p>".concat(next(node.content), "</p>"); },
    _a[richTextTypes.BLOCKS.HEADING_1] = function (node, next) { return "<h1>".concat(next(node.content), "</h1>"); },
    _a[richTextTypes.BLOCKS.HEADING_2] = function (node, next) { return "<h2>".concat(next(node.content), "</h2>"); },
    _a[richTextTypes.BLOCKS.HEADING_3] = function (node, next) { return "<h3>".concat(next(node.content), "</h3>"); },
    _a[richTextTypes.BLOCKS.HEADING_4] = function (node, next) { return "<h4>".concat(next(node.content), "</h4>"); },
    _a[richTextTypes.BLOCKS.HEADING_5] = function (node, next) { return "<h5>".concat(next(node.content), "</h5>"); },
    _a[richTextTypes.BLOCKS.HEADING_6] = function (node, next) { return "<h6>".concat(next(node.content), "</h6>"); },
    _a[richTextTypes.BLOCKS.EMBEDDED_ENTRY] = function (node, next) { return "<div>".concat(next(node.content), "</div>"); },
    _a[richTextTypes.BLOCKS.EMBEDDED_RESOURCE] = function (node, next) { return "<div>".concat(next(node.content), "</div>"); },
    _a[richTextTypes.BLOCKS.UL_LIST] = function (node, next) { return "<ul>".concat(next(node.content), "</ul>"); },
    _a[richTextTypes.BLOCKS.OL_LIST] = function (node, next) { return "<ol>".concat(next(node.content), "</ol>"); },
    _a[richTextTypes.BLOCKS.LIST_ITEM] = function (node, next) { return "<li>".concat(next(node.content), "</li>"); },
    _a[richTextTypes.BLOCKS.QUOTE] = function (node, next) { return "<blockquote>".concat(next(node.content), "</blockquote>"); },
    _a[richTextTypes.BLOCKS.HR] = function () { return '<hr/>'; },
    _a[richTextTypes.BLOCKS.TABLE] = function (node, next) { return "<table>".concat(next(node.content), "</table>"); },
    _a[richTextTypes.BLOCKS.TABLE_ROW] = function (node, next) { return "<tr>".concat(next(node.content), "</tr>"); },
    _a[richTextTypes.BLOCKS.TABLE_HEADER_CELL] = function (node, next) { return "<th>".concat(next(node.content), "</th>"); },
    _a[richTextTypes.BLOCKS.TABLE_CELL] = function (node, next) { return "<td>".concat(next(node.content), "</td>"); },
    _a[richTextTypes.INLINES.ASSET_HYPERLINK] = function (node) { return defaultInline(richTextTypes.INLINES.ASSET_HYPERLINK, node); },
    _a[richTextTypes.INLINES.ENTRY_HYPERLINK] = function (node) { return defaultInline(richTextTypes.INLINES.ENTRY_HYPERLINK, node); },
    _a[richTextTypes.INLINES.RESOURCE_HYPERLINK] = function (node) {
        return defaultInlineResource(richTextTypes.INLINES.RESOURCE_HYPERLINK, node);
    },
    _a[richTextTypes.INLINES.EMBEDDED_ENTRY] = function (node) { return defaultInline(richTextTypes.INLINES.EMBEDDED_ENTRY, node); },
    _a[richTextTypes.INLINES.EMBEDDED_RESOURCE] = function (node) {
        return defaultInlineResource(richTextTypes.INLINES.EMBEDDED_RESOURCE, node);
    },
    _a[richTextTypes.INLINES.HYPERLINK] = function (node, next) {
        var href = typeof node.data.uri === 'string' ? node.data.uri : '';
        return "<a href=".concat(attributeValue(href), ">").concat(next(node.content), "</a>");
    },
    _a);
var defaultMarkRenderers = (_b = {},
    _b[richTextTypes.MARKS.BOLD] = function (text) { return "<b>".concat(text, "</b>"); },
    _b[richTextTypes.MARKS.ITALIC] = function (text) { return "<i>".concat(text, "</i>"); },
    _b[richTextTypes.MARKS.UNDERLINE] = function (text) { return "<u>".concat(text, "</u>"); },
    _b[richTextTypes.MARKS.CODE] = function (text) { return "<code>".concat(text, "</code>"); },
    _b[richTextTypes.MARKS.SUPERSCRIPT] = function (text) { return "<sup>".concat(text, "</sup>"); },
    _b[richTextTypes.MARKS.SUBSCRIPT] = function (text) { return "<sub>".concat(text, "</sub>"); },
    _b[richTextTypes.MARKS.STRIKETHROUGH] = function (text) { return "<s>".concat(text, "</s>"); },
    _b);
var defaultInline = function (type, node) {
    return "<span>type: ".concat(escape(type), " id: ").concat(escape(node.data.target.sys.id), "</span>");
};
var defaultInlineResource = function (type, node) {
    return "<span>type: ".concat(escape(type), " urn: ").concat(escape(node.data.target.sys.urn), "</span>");
};
/**
 * Serialize a Contentful Rich Text `document` to an html string.
 */
function documentToHtmlString(richTextDocument, options) {
    if (options === void 0) { options = {}; }
    if (!richTextDocument || !richTextDocument.content) {
        return '';
    }
    // Strip empty trailing paragraph if enabled
    var processedDocument = richTextDocument;
    if (options.stripEmptyTrailingParagraph) {
        processedDocument = richTextTypes.helpers.stripEmptyTrailingParagraphFromDocument(richTextDocument);
    }
    return nodeListToHtmlString(processedDocument.content, {
        renderNode: __assign(__assign({}, defaultNodeRenderers), options.renderNode),
        renderMark: __assign(__assign({}, defaultMarkRenderers), options.renderMark),
        preserveWhitespace: options.preserveWhitespace,
    });
}
function nodeListToHtmlString(nodes, _a) {
    var renderNode = _a.renderNode, renderMark = _a.renderMark, preserveWhitespace = _a.preserveWhitespace;
    return nodes
        .map(function (node) { return nodeToHtmlString(node, { renderNode: renderNode, renderMark: renderMark, preserveWhitespace: preserveWhitespace }); })
        .join('');
}
function nodeToHtmlString(node, _a) {
    var renderNode = _a.renderNode, renderMark = _a.renderMark, preserveWhitespace = _a.preserveWhitespace;
    if (richTextTypes.helpers.isText(node)) {
        var nodeValue = escape(node.value);
        // If preserveWhitespace is true, handle line breaks and spaces.
        if (preserveWhitespace) {
            nodeValue = nodeValue
                .replace(/\n/g, '<br/>')
                .replace(/ {2,}/g, function (match) { return '&nbsp;'.repeat(match.length); });
        }
        if (node.marks.length > 0) {
            return node.marks.reduce(function (value, mark) {
                if (!renderMark[mark.type]) {
                    return value;
                }
                return renderMark[mark.type](value);
            }, nodeValue);
        }
        return nodeValue;
    }
    else {
        var nextNode = function (nodes) {
            return nodeListToHtmlString(nodes, { renderMark: renderMark, renderNode: renderNode, preserveWhitespace: preserveWhitespace });
        };
        if (!node.nodeType || !renderNode[node.nodeType]) {
            // TODO: Figure what to return when passed an unrecognized node.
            return '';
        }
        return renderNode[node.nodeType](node, nextNode);
    }
}

exports.documentToHtmlString = documentToHtmlString;
//# sourceMappingURL=rich-text-html-renderer.es5.js.map
